package com.cylan.jiafeigou.cache.db.module;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT".
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Server = new Property(2, String.class, "server", false, "SERVER");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property LoginType = new Property(4, int.class, "loginType", false, "LOGIN_TYPE");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Token = new Property(6, String.class, "token", false, "TOKEN");
        public final static Property Alias = new Property(7, String.class, "alias", false, "ALIAS");
        public final static Property EnablePush = new Property(8, boolean.class, "enablePush", false, "ENABLE_PUSH");
        public final static Property EnableSound = new Property(9, boolean.class, "enableSound", false, "ENABLE_SOUND");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property EnableVibrate = new Property(11, boolean.class, "enableVibrate", false, "ENABLE_VIBRATE");
        public final static Property PhotoUrl = new Property(12, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property Action = new Property(13, String.class, "action", false, "ACTION");
        public final static Property State = new Property(14, String.class, "state", false, "STATE");
        public final static Property Option = new Property(15, String.class, "option", false, "OPTION");
        public final static Property AccountJson = new Property(16, String.class, "accountJson", false, "ACCOUNT_JSON");
    }


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ACCOUNT\" TEXT UNIQUE ," + // 1: account
                "\"SERVER\" TEXT," + // 2: server
                "\"PASSWORD\" TEXT," + // 3: password
                "\"LOGIN_TYPE\" INTEGER NOT NULL ," + // 4: loginType
                "\"PHONE\" TEXT," + // 5: phone
                "\"TOKEN\" TEXT," + // 6: token
                "\"ALIAS\" TEXT," + // 7: alias
                "\"ENABLE_PUSH\" INTEGER NOT NULL ," + // 8: enablePush
                "\"ENABLE_SOUND\" INTEGER NOT NULL ," + // 9: enableSound
                "\"EMAIL\" TEXT," + // 10: email
                "\"ENABLE_VIBRATE\" INTEGER NOT NULL ," + // 11: enableVibrate
                "\"PHOTO_URL\" TEXT," + // 12: photoUrl
                "\"ACTION\" TEXT," + // 13: action
                "\"STATE\" TEXT," + // 14: state
                "\"OPTION\" TEXT," + // 15: option
                "\"ACCOUNT_JSON\" TEXT);"); // 16: accountJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(3, server);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindLong(5, entity.getLoginType());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(8, alias);
        }
        stmt.bindLong(9, entity.getEnablePush() ? 1L: 0L);
        stmt.bindLong(10, entity.getEnableSound() ? 1L: 0L);
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
        stmt.bindLong(12, entity.getEnableVibrate() ? 1L: 0L);
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(13, photoUrl);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(14, action);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(15, state);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(16, option);
        }
 
        String accountJson = entity.getAccountJson();
        if (accountJson != null) {
            stmt.bindString(17, accountJson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(3, server);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindLong(5, entity.getLoginType());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(8, alias);
        }
        stmt.bindLong(9, entity.getEnablePush() ? 1L: 0L);
        stmt.bindLong(10, entity.getEnableSound() ? 1L: 0L);
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
        stmt.bindLong(12, entity.getEnableVibrate() ? 1L: 0L);
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(13, photoUrl);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(14, action);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(15, state);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(16, option);
        }
 
        String accountJson = entity.getAccountJson();
        if (accountJson != null) {
            stmt.bindString(17, accountJson);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // server
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.getInt(offset + 4), // loginType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // token
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // alias
            cursor.getShort(offset + 8) != 0, // enablePush
            cursor.getShort(offset + 9) != 0, // enableSound
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.getShort(offset + 11) != 0, // enableVibrate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // photoUrl
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // action
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // state
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // option
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // accountJson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setServer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLoginType(cursor.getInt(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlias(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEnablePush(cursor.getShort(offset + 8) != 0);
        entity.setEnableSound(cursor.getShort(offset + 9) != 0);
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEnableVibrate(cursor.getShort(offset + 11) != 0);
        entity.setPhotoUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAction(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setState(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOption(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAccountJson(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Account entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
