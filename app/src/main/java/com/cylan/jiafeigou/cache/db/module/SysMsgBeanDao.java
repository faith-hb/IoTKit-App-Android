package com.cylan.jiafeigou.cache.db.module;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_MSG_BEAN".
*/
public class SysMsgBeanDao extends AbstractDao<SysMsgBean, Integer> {

    public static final String TABLENAME = "SYS_MSG_BEAN";

    /**
     * Properties of entity SysMsgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Time = new Property(3, long.class, "time", false, "TIME");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property IsDone = new Property(5, int.class, "isDone", false, "IS_DONE");
        public final static Property IsCheck = new Property(6, int.class, "isCheck", false, "IS_CHECK");
        public final static Property Sn = new Property(7, String.class, "sn", false, "SN");
        public final static Property Pid = new Property(8, int.class, "pid", false, "PID");
    }


    public SysMsgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SysMsgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_MSG_BEAN\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: content
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TIME\" INTEGER NOT NULL ," + // 3: time
                "\"NAME\" TEXT," + // 4: name
                "\"IS_DONE\" INTEGER NOT NULL ," + // 5: isDone
                "\"IS_CHECK\" INTEGER NOT NULL ," + // 6: isCheck
                "\"SN\" TEXT," + // 7: sn
                "\"PID\" INTEGER NOT NULL );"); // 8: pid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_MSG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysMsgBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getIsDone());
        stmt.bindLong(7, entity.getIsCheck());
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(8, sn);
        }
        stmt.bindLong(9, entity.getPid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysMsgBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getIsDone());
        stmt.bindLong(7, entity.getIsCheck());
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(8, sn);
        }
        stmt.bindLong(9, entity.getPid());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public SysMsgBean readEntity(Cursor cursor, int offset) {
        SysMsgBean entity = new SysMsgBean( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.getInt(offset + 2), // type
            cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getInt(offset + 5), // isDone
            cursor.getInt(offset + 6), // isCheck
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sn
            cursor.getInt(offset + 8) // pid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysMsgBean entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setTime(cursor.getLong(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsDone(cursor.getInt(offset + 5));
        entity.setIsCheck(cursor.getInt(offset + 6));
        entity.setSn(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPid(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(SysMsgBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(SysMsgBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysMsgBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
