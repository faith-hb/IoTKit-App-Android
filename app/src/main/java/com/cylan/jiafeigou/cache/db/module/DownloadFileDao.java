package com.cylan.jiafeigou.cache.db.module;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_FILE".
*/
public class DownloadFileDao extends AbstractDao<DownloadFile, Long> {

    public static final String TABLENAME = "DOWNLOAD_FILE";

    /**
     * Properties of entity DownloadFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "FILE_NAME");
        public final static Property Uuid = new Property(2, String.class, "uuid", false, "UUID");
        public final static Property Time = new Property(3, long.class, "time", false, "TIME");
        public final static Property Md5 = new Property(4, byte[].class, "md5", false, "MD5");
        public final static Property FileSize = new Property(5, int.class, "fileSize", false, "FILE_SIZE");
        public final static Property Offset = new Property(6, int.class, "offset", false, "OFFSET");
        public final static Property State = new Property(7, int.class, "state", false, "STATE");
        public final static Property Place = new Property(8, int.class, "place", false, "PLACE");
    }


    public DownloadFileDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE_NAME\" TEXT," + // 1: fileName
                "\"UUID\" TEXT," + // 2: uuid
                "\"TIME\" INTEGER NOT NULL ," + // 3: time
                "\"MD5\" BLOB," + // 4: md5
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 5: fileSize
                "\"OFFSET\" INTEGER NOT NULL ," + // 6: offset
                "\"STATE\" INTEGER NOT NULL ," + // 7: state
                "\"PLACE\" INTEGER NOT NULL );"); // 8: place
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
        stmt.bindLong(4, entity.getTime());
 
        byte[] md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindBlob(5, md5);
        }
        stmt.bindLong(6, entity.getFileSize());
        stmt.bindLong(7, entity.getOffset());
        stmt.bindLong(8, entity.getState());
        stmt.bindLong(9, entity.getPlace());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
        stmt.bindLong(4, entity.getTime());
 
        byte[] md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindBlob(5, md5);
        }
        stmt.bindLong(6, entity.getFileSize());
        stmt.bindLong(7, entity.getOffset());
        stmt.bindLong(8, entity.getState());
        stmt.bindLong(9, entity.getPlace());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadFile readEntity(Cursor cursor, int offset) {
        DownloadFile entity = new DownloadFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uuid
            cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // md5
            cursor.getInt(offset + 5), // fileSize
            cursor.getInt(offset + 6), // offset
            cursor.getInt(offset + 7), // state
            cursor.getInt(offset + 8) // place
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.getLong(offset + 3));
        entity.setMd5(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setFileSize(cursor.getInt(offset + 5));
        entity.setOffset(cursor.getInt(offset + 6));
        entity.setState(cursor.getInt(offset + 7));
        entity.setPlace(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadFile entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
