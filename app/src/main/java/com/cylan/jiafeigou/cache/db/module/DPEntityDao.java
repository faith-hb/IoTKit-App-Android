package com.cylan.jiafeigou.cache.db.module;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DPENTITY".
*/
public class DPEntityDao extends AbstractDao<DPEntity, Long> {

    public static final String TABLENAME = "DPENTITY";

    /**
     * Properties of entity DPEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Server = new Property(2, String.class, "server", false, "SERVER");
        public final static Property Uuid = new Property(3, String.class, "uuid", false, "UUID");
        public final static Property Version = new Property(4, Long.class, "version", false, "VERSION");
        public final static Property MsgId = new Property(5, Integer.class, "msgId", false, "MSG_ID");
        public final static Property Bytes = new Property(6, byte[].class, "bytes", false, "BYTES");
        public final static Property Action = new Property(7, String.class, "action", false, "ACTION");
        public final static Property State = new Property(8, String.class, "state", false, "STATE");
        public final static Property Option = new Property(9, String.class, "option", false, "OPTION");
    }

    private DaoSession daoSession;


    public DPEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DPEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DPENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"SERVER\" TEXT," + // 2: server
                "\"UUID\" TEXT," + // 3: uuid
                "\"VERSION\" INTEGER," + // 4: version
                "\"MSG_ID\" INTEGER," + // 5: msgId
                "\"BYTES\" BLOB," + // 6: bytes
                "\"ACTION\" TEXT," + // 7: action
                "\"STATE\" TEXT," + // 8: state
                "\"OPTION\" TEXT);"); // 9: option
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DPENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DPEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(3, server);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(4, uuid);
        }
 
        Long version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(5, version);
        }
 
        Integer msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(6, msgId);
        }
 
        byte[] bytes = entity.getBytes();
        if (bytes != null) {
            stmt.bindBlob(7, bytes);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(8, action);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(9, state);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(10, option);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DPEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(3, server);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(4, uuid);
        }
 
        Long version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(5, version);
        }
 
        Integer msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(6, msgId);
        }
 
        byte[] bytes = entity.getBytes();
        if (bytes != null) {
            stmt.bindBlob(7, bytes);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(8, action);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(9, state);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(10, option);
        }
    }

    @Override
    protected final void attachEntity(DPEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DPEntity readEntity(Cursor cursor, int offset) {
        DPEntity entity = new DPEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // server
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uuid
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // version
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // msgId
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // bytes
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // action
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // state
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // option
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DPEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setServer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVersion(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setMsgId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBytes(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setAction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setState(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOption(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DPEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DPEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DPEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
