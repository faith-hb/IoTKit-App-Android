package com.cylan.jiafeigou.cache.db.module;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Sn = new Property(2, String.class, "sn", false, "SN");
        public final static Property Alias = new Property(3, String.class, "alias", false, "ALIAS");
        public final static Property ShareAccount = new Property(4, String.class, "shareAccount", false, "SHARE_ACCOUNT");
        public final static Property Pid = new Property(5, int.class, "pid", false, "PID");
        public final static Property Vid = new Property(6, String.class, "vid", false, "VID");
        public final static Property Account = new Property(7, String.class, "account", false, "ACCOUNT");
        public final static Property RegionType = new Property(8, int.class, "regionType", false, "REGION_TYPE");
        public final static Property Server = new Property(9, String.class, "server", false, "SERVER");
        public final static Property Action = new Property(10, String.class, "action", false, "ACTION");
        public final static Property State = new Property(11, String.class, "state", false, "STATE");
        public final static Property Option = new Property(12, String.class, "option", false, "OPTION");
    }


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"UUID\" TEXT," + // 1: uuid
                "\"SN\" TEXT," + // 2: sn
                "\"ALIAS\" TEXT," + // 3: alias
                "\"SHARE_ACCOUNT\" TEXT," + // 4: shareAccount
                "\"PID\" INTEGER NOT NULL ," + // 5: pid
                "\"VID\" TEXT," + // 6: vid
                "\"ACCOUNT\" TEXT," + // 7: account
                "\"REGION_TYPE\" INTEGER NOT NULL ," + // 8: regionType
                "\"SERVER\" TEXT," + // 9: server
                "\"ACTION\" TEXT," + // 10: action
                "\"STATE\" TEXT," + // 11: state
                "\"OPTION\" TEXT);"); // 12: option
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(3, sn);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String shareAccount = entity.getShareAccount();
        if (shareAccount != null) {
            stmt.bindString(5, shareAccount);
        }
        stmt.bindLong(6, entity.getPid());
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(7, vid);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(8, account);
        }
        stmt.bindLong(9, entity.getRegionType());
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(10, server);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(11, action);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(12, state);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(13, option);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(3, sn);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String shareAccount = entity.getShareAccount();
        if (shareAccount != null) {
            stmt.bindString(5, shareAccount);
        }
        stmt.bindLong(6, entity.getPid());
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(7, vid);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(8, account);
        }
        stmt.bindLong(9, entity.getRegionType());
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(10, server);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(11, action);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(12, state);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(13, option);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alias
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shareAccount
            cursor.getInt(offset + 5), // pid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // vid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // account
            cursor.getInt(offset + 8), // regionType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // server
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // action
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // state
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // option
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShareAccount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPid(cursor.getInt(offset + 5));
        entity.setVid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegionType(cursor.getInt(offset + 8));
        entity.setServer(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAction(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setState(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOption(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
