package com.cylan.jiafeigou.cache.db.module;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_BEAN".
*/
public class FriendBeanDao extends AbstractDao<FriendBean, Long> {

    public static final String TABLENAME = "FRIEND_BEAN";

    /**
     * Properties of entity FriendBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IconUrl = new Property(1, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Alias = new Property(2, String.class, "alias", false, "ALIAS");
        public final static Property Account = new Property(3, String.class, "account", false, "ACCOUNT");
        public final static Property MarkName = new Property(4, String.class, "markName", false, "MARK_NAME");
        public final static Property IsCheckFlag = new Property(5, int.class, "isCheckFlag", false, "IS_CHECK_FLAG");
        public final static Property Sortkey = new Property(6, String.class, "sortkey", false, "SORTKEY");
    }


    public FriendBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FriendBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ICON_URL\" TEXT," + // 1: iconUrl
                "\"ALIAS\" TEXT," + // 2: alias
                "\"ACCOUNT\" TEXT," + // 3: account
                "\"MARK_NAME\" TEXT," + // 4: markName
                "\"IS_CHECK_FLAG\" INTEGER NOT NULL ," + // 5: isCheckFlag
                "\"SORTKEY\" TEXT);"); // 6: sortkey
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(2, iconUrl);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(4, account);
        }
 
        String markName = entity.getMarkName();
        if (markName != null) {
            stmt.bindString(5, markName);
        }
        stmt.bindLong(6, entity.getIsCheckFlag());
 
        String sortkey = entity.getSortkey();
        if (sortkey != null) {
            stmt.bindString(7, sortkey);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(2, iconUrl);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(4, account);
        }
 
        String markName = entity.getMarkName();
        if (markName != null) {
            stmt.bindString(5, markName);
        }
        stmt.bindLong(6, entity.getIsCheckFlag());
 
        String sortkey = entity.getSortkey();
        if (sortkey != null) {
            stmt.bindString(7, sortkey);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendBean readEntity(Cursor cursor, int offset) {
        FriendBean entity = new FriendBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iconUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alias
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // account
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // markName
            cursor.getInt(offset + 5), // isCheckFlag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sortkey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIconUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlias(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMarkName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsCheckFlag(cursor.getInt(offset + 5));
        entity.setSortkey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
